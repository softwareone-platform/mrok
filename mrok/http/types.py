import asyncio
from typing import Protocol


class StreamReader(Protocol):
    async def read(self, n: int = -1) -> bytes: ...
    async def readexactly(self, n: int) -> bytes: ...
    async def readline(self) -> bytes: ...
    def at_eof(self) -> bool: ...

    @property
    def underlying(self) -> asyncio.StreamReader: ...


class StreamWriter(Protocol):
    def write(self, data: bytes) -> None: ...
    async def drain(self) -> None: ...
    def close(self) -> None: ...
    async def wait_closed(self) -> None: ...

    @property
    def transport(self): ...

    @property
    def underlying(self) -> asyncio.StreamWriter: ...
